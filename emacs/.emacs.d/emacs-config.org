#+TITLE: Emacs Configuration
#+AUTHOR: Andrewzweb
#+EMAIL: andrewzweb@gmail.com
#+STARTUP: content

* Base Configuration
:PROPERTIES:
:ID:       9d67bb17-baaa-45f4-8beb-526e8dd7aad4
:END:
** Base UI Settings
:PROPERTIES:
:ID:       b8257ca1-ae74-4f9f-b215-45f7c8e7e09c
:END:

#+BEGIN_SRC emacs-lisp
;; Disable unnecessary UI elements
(tooltip-mode      -1)  ;; Disable tooltips
(menu-bar-mode     -1)  ;; Hide menu bar
(tool-bar-mode     -1)  ;; Hide tool bar
(scroll-bar-mode   -1)  ;; Hide scroll bar
(blink-cursor-mode -1)  ;; Disable blinking cursor

;; Disable dialog boxes and enable smooth redisplay
(setq use-dialog-box nil)
(setq redisplay-dont-pause t)

;; Use simpler y/n questions instead of yes/no prompts
(defalias 'yes-or-no-p 'y-or-n-p)

;; Enable clipboard sharing with system
(setq x-select-enable-clipboard t)

;; Don't enforce final newline in files
(setq require-final-newline nil)

;; Disable backup and auto-save files
(setq backup-inhibited t)
(setq auto-save-default nil)
#+END_SRC

** macOS-Specific Settings
:PROPERTIES:
:ID:       697fe8ea-f595-4596-af9a-59933008b49a
:END:
#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin) ;; Apply only on macOS
  ;; Set font to a macOS-friendly font
  (set-face-attribute 'default nil :font "Menlo" :height 140)

  ;; Use Command key as Meta
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'none)

  ;; Ensure correct system clipboard integration
  (setq select-enable-clipboard t)
  (setq select-enable-primary t)

  ;; Make the shell use the correct PATH
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))

  ;; Fix backspace and delete key issues
  (normal-erase-is-backspace-mode 1)

  ;; Enable smooth scrolling
  (setq mac-mouse-wheel-smooth-scroll t)

  ;; MacOS-native fullscreen toggle
  (global-set-key (kbd "M-RET") 'toggle-frame-fullscreen))
#+END_SRC

** Startup Customization
:PROPERTIES:
:ID:       43571981-7768-402a-8b84-39f708ca8272
:END:
#+BEGIN_SRC emacs-lisp
;; Disable startup message
(setq inhibit-startup-message t)

;; Set initial *scratch* buffer message
(setq initial-scratch-message "Hello Andrew")
#+END_SRC

** Keyboard Shortcuts
:PROPERTIES:
:ID:       3bbd5bef-391d-46eb-baa8-d806fd5b37a7
:END:
#+BEGIN_SRC emacs-lisp
;; Define macros shortcuts
(global-set-key (kbd "C-c 1") 'kmacro-start-macro)
(global-set-key (kbd "C-c 2") 'kmacro-end-macro)
(global-set-key (kbd "C-c 3") 'kmacro-end-and-call-macro)

;; Adjust text size with Ctrl-+ and Ctrl--
(global-set-key (kbd "C-+") 'text-scale-increase)  
(global-set-key (kbd "C--") 'text-scale-decrease)

;; Bind Enter key to automatically indent
(global-set-key (kbd "RET") 'newline-and-indent)
#+END_SRC

** Scrolling Behavior
:PROPERTIES:
:ID:       e3d10e98-8a3b-4928-8f1f-5fbdc5d6b35c
:END:
#+BEGIN_SRC emacs-lisp
;; Configure scrolling
(setq scroll-step 1) ;; Scroll one line at a time
(setq scroll-margin 10)  ;; Keep 10 lines of margin while scrolling
(setq scroll-conservatively 10000)
(setq scroll-preserve-screen-position 10) ;; Preserve cursor position
#+END_SRC

** Text Editing Enhancements
:PROPERTIES:
:ID:       226a33be-8da2-499a-b2a1-5a14ffb5520c
:END:
#+BEGIN_SRC emacs-lisp
;; Enable syntax highlighting
(require 'font-lock)
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)

;; Enable automatic pairing of parentheses and other delimiters
(electric-pair-mode 1)

;; Disable automatic indentation after pressing Enter
(electric-indent-mode -1)

;; Set indentation preferences
(setq-default indent-tabs-mode nil) ;; Use spaces instead of tabs
(setq-default tab-width 4)
(setq-default c-basic-offset 4)
(setq-default standard-indent 4)
(setq-default lisp-body-indent 4)
(setq lisp-indent-function 'common-lisp-indent-function)
#+END_SRC

** Text Wrapping and Visual Line Mode
:PROPERTIES:
:ID:       1b24eda1-6462-4b86-bb80-91fcdda07b97
:END:
#+BEGIN_SRC emacs-lisp
;; Disable visual line mode globally
(global-visual-line-mode -1)

;; Enable word wrapping
(setq word-wrap t)

;; Disable automatic line breaking in Org mode
(auto-fill-mode -1)
(add-hook 'org-mode-hook (lambda () (auto-fill-mode -1)))
#+END_SRC

** Search and Highlighting
:PROPERTIES:
:ID:       c9022ff7-e4e4-4824-89be-fb4b3c5ee01a
:END:
#+BEGIN_SRC emacs-lisp
;; Enable search highlights
(setq search-highlight t)
(setq query-replace-highlight t)

;; Enable matching parentheses highlighting
(show-paren-mode t)
(setq show-paren-style 'expression)
#+END_SRC

** Default Input Method
:PROPERTIES:
:ID:       c5f95c4d-b156-4b81-b4a6-bdbbd3a160b9
:END:
#+BEGIN_SRC emacs-lisp
;; Set default input method to Russian
(setq default-input-method 'russian-computer)
#+END_SRC

** Server: Emacs-Client Mode
:PROPERTIES:
:ID:       b82c61b0-9021-4c49-ae85-3b038304f654
:END:

#+BEGIN_SRC emacs-lisp
;; Enable emacs server for external editing
(use-package edit-server
  :ensure t
  :config
  (edit-server-start)
  (setq edit-server-default-major-mode 'markdown-mode)
  (setq edit-server-new-frame nil)
  (with-eval-after-load 'markdown-mode
    (setq markdown-fontify-code-blocks-natively t)))
#+END_SRC

* Navigation Configuration
:PROPERTIES:
:ID:       883059e0-6045-40d6-98b7-8fffd95cfdcd
:END:

Navigation-related settings and packages to improve buffer navigation, command execution, and window management.

** IDO Mode (Interactive Do)
:PROPERTIES:
:ID: 650f99da-d613-452d-8fbf-6ce2af0de14e
:END:

Provides a more efficient and dynamic way to select buffers and files.

#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)  ;; Enable flexible matching for Ido
(setq ido-everywhere t)            ;; Use Ido mode globally
(setq ido-create-new-buffer 'always) ;; Always create new buffers
(ido-mode 1)                        ;; Enable Ido mode
#+END_SRC

** ErgoEmacs Mode
:PROPERTIES:
:ID: 2c326a69-6014-4b5f-a77d-59558ff1cabb
:END:

ErgoEmacs replaces standard Emacs keybindings with more ergonomic alternatives.

#+BEGIN_SRC emacs-lisp
(use-package ergoemacs-mode
  :ensure t
  :config
  (ergoemacs-mode 1))
#+END_SRC

** Smex (Improved M-x)
:PROPERTIES:
:ID: 7c4ecd35-84d1-4faa-9fd3-a47701df5b78
:END:

Smex enhances `M-x` by adding command history and suggestions.

#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t)

(global-set-key (kbd "M-x") 'smex)  ;; Bind M-x to Smex
(global-set-key (kbd "M-X") 'smex-major-mode-commands)  ;; Bind M-X to major mode commands
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command) ;; Restore old M-x functionality
#+END_SRC

** Ace Window (Efficient Window Management)
:PROPERTIES:
:ID: af8869c2-339e-4c4e-909e-ea66f921df40
:END:

Ace Window allows quick and efficient window switching using shortcuts.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (global-set-key (kbd "M-o") 'ace-window)  ;; Use M-o to switch windows
  (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l))  ;; Define Aw keys
  (setq aw-background nil)
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0))))))

;; Define custom window actions for Ace-Window dispatch
(defvar aw-dispatch-alist
  '((?x aw-delete-window "Delete Window")
    (?m aw-swap-window "Swap Windows")
    (?M aw-move-window "Move Window")
    (?j aw-switch-buffer-in-window "Select Buffer")
    (?n aw-flip-window)
    (?u aw-switch-buffer-other-window "Switch Buffer in Other Window")
    (?c aw-split-window-fair "Split Fair Window")
    (?v aw-split-window-vert "Split Vert Window")
    (?b aw-split-window-horz "Split Horizontally")
    (?o delete-other-windows "Delete Other Windows")
    (?? aw-show-dispatch-help))
  "Custom actions for `aw-dispatch-default' command.")
#+END_SRC

** Ace Jump Mode (Quick Cursor Navigation)
:PROPERTIES:
:ID: 435a017d-d343-4fcc-b3ee-106e3c7525eb
:END:

Ace Jump allows fast navigation using a single keystroke.

#+BEGIN_SRC emacs-lisp
(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1))

(use-package ace-jump-mode
  :ensure t
  :chords (("jj" . ace-jump-char-mode)
           ("jk" . ace-jump-word-mode)
           ("jl" . ace-jump-line-mode)))
#+END_SRC

** Dumb Jump (Go to Definition)
:PROPERTIES:
:ID: c077009f-4e54-41aa-80d5-8e71ac649984
:END:

Dumb Jump provides quick "go-to-definition" functionality.

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :ensure t
  :init (dumb-jump-mode)
  :bind (("C-c o" . dumb-jump-go-other-window)
         ("C-c j" . dumb-jump-go)
         ("C-c x" . dumb-jump-go-prefer-external)
         ("C-c z" . dumb-jump-go-prefer-external-other-window)))
#+END_SRC

** vertico-posframe
:PROPERTIES:
:ID:       1f76e8df-a31a-46bc-90ed-dbe1bd98246c
:END:

#+BEGIN_SRC emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode)
  (setq vertico-cycle t))

(use-package posframe
  :ensure t)

(use-package vertico-posframe
  :ensure t
  :after (vertico posframe)
  :config
  (setq vertico-posframe-width 80
        vertico-posframe-height 20
        vertico-posframe-poshandler 'posframe-poshandler-frame-center)
  (vertico-posframe-mode 1))
#+END_SRC

* Org-Mode Configuration
:PROPERTIES:
:ID:       2635614e-779e-4d80-830c-f236ce756e3f
:END:

** Core Settings
:PROPERTIES:
:ID:       d8debe44-8997-48e6-af02-47de3be207fe
:END:

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :pin manual
  :custom
  ;; Better default settings
  (org-startup-folded 'content)
  (org-startup-indented t)
  (org-adapt-indentation t)
  (org-edit-src-content-indentation 0)
  (org-src-tab-acts-natively t)
  (org-src-fontify-natively t)
  (org-use-speed-commands t)
  (org-return-follows-link t)
  (org-hide-emphasis-markers t)
  (org-pretty-entities t)
  (org-fontify-whole-heading-line t)
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-list-allow-alphabetical t)
  (org-catch-invisible-edits 'smart)
  (org-special-ctrl-a/e t)
  (org-insert-heading-respect-content t)
  (org-M-RET-may-split-line '((default . nil)))

** Keybindings and Navigation
:PROPERTIES:
:ID:       e7ea7036-c9c1-4a33-a596-65036d2b273b
:END:

#+BEGIN_SRC emacs-lisp
;; Global org keybindings
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c b") 'org-switchb)

;; Org-mode specific keybindings
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-c t") 'org-todo)
  (define-key org-mode-map (kbd "C-c n") 'org-next-visible-heading)
  (define-key org-mode-map (kbd "C-c p") 'org-previous-visible-heading)
  (define-key org-mode-map (kbd "C-c i") 'org-clock-in)
  (define-key org-mode-map (kbd "C-c o") 'org-clock-out)
  (define-key org-mode-map (kbd "C-c r") 'org-refile)
  (define-key org-mode-map (kbd "C-c s") 'org-schedule)
  (define-key org-mode-map (kbd "C-c d") 'org-deadline)
  (define-key org-mode-map (kbd "C-c f") 'org-footnote-action)
  (define-key org-mode-map (kbd "C-c k") 'org-cut-subtree)
  (define-key org-mode-map (kbd "C-c y") 'org-paste-subtree)
  (define-key org-mode-map (kbd "C-c m") 'org-mark-subtree)
  (define-key org-mode-map (kbd "C-c w") 'org-refile-goto-last-stored)
  (define-key org-mode-map (kbd "C-c v") 'org-show-todo-tree)
  (define-key org-mode-map (kbd "C-c h") 'org-toggle-heading)
  (define-key org-mode-map (kbd "C-c j") 'org-goto)
  (define-key org-mode-map (kbd "C-c e") 'org-set-effort)
  (define-key org-mode-map (kbd "C-c x") 'org-export-dispatch))

;; Speed commands
(setq org-use-speed-commands t)
(add-to-list 'org-speed-commands-user '("x" org-todo "DONE"))
(add-to-list 'org-speed-commands-user '("t" org-todo "TODO"))
(add-to-list 'org-speed-commands-user '("n" org-next-visible-heading))
(add-to-list 'org-speed-commands-user '("p" org-previous-visible-heading))

** File Management
:PROPERTIES:
:ID:       6ed4d139-0420-4e09-acfb-95bb938be86d
:END:

#+BEGIN_SRC emacs-lisp
;; File associations
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|org_archive\\)$" . org-mode))

;; Detect OS and set org-directory accordingly
(setq my-org-workspace
      (cond
       ((eq system-type 'darwin)  "~/Library/Mobile Documents/com~apple~CloudDocs/org/")
       ((eq system-type 'gnu/linux) "~/Documents/org/")
       ((eq system-type 'windows-nt) "C:/Users/andrew/Documents/org/")
       (t (expand-file-name "~/org/")))) ;; Default fallback

(setq org-directory my-org-workspace)
(setq org-default-notes-file (concat org-directory "notes.org"))

;; Set agenda files dynamically
(setq org-agenda-files (directory-files-recursively
                        (concat org-directory "workspace/") "\\.org$"))

;; File templates
(setq org-structure-template-alist
      '(("s" "#+BEGIN_SRC ?\n\n#+END_SRC")
        ("e" "#+BEGIN_EXAMPLE\n\n#+END_EXAMPLE")
        ("q" "#+BEGIN_QUOTE\n\n#+END_QUOTE")
        ("v" "#+BEGIN_VERSE\n\n#+END_VERSE")
        ("c" "#+BEGIN_CENTER\n\n#+END_CENTER")
        ("l" "#+BEGIN_LaTeX\n\n#+END_LaTeX")
        ("L" "#+LaTeX: ")
        ("h" "#+BEGIN_HTML\n\n#+END_HTML")
        ("H" "#+HTML: ")
        ("a" "#+BEGIN_ASCII\n\n#+END_ASCII")
        ("A" "#+ASCII: ")
        ("i" "#+INDEX: ")
        ("I" "#+INCLUDE: ")))

;; Auto-save and backup settings
(setq org-auto-save-visited-mode t)
(setq org-save-all-org-buffers t)
(setq org-export-backends '(ascii html latex md odt))

** Custom Styles
:PROPERTIES:
:CREATED:  [2023-10-23 пн 14:46]
:ID:       eb4c441b-227c-4890-9be4-2e8acee039ff
:END:

#+BEGIN_SRC emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:foreground "#E1E1E0" :weight bold :height 1.3))))
 '(org-level-2 ((t (:foreground "#D6BBB5" :weight bold :height 1.2))))
 ;; ... customize other org-level faces similarly ...
 '(org-document-title ((t (:foreground "#EFBBBF" :weight bold :height 1.5))))
 '(org-done ((t (:foreground "#5A7E63" :weight bold))))
 '(org-todo ((t (:foreground "#B57660" :weight bold)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my-org-mode-visual-tweaks ()
  (setq line-spacing 0.3) ; adjust the line spacing
  (variable-pitch-mode 1) ; use variable pitch fonts
  )
(add-hook 'org-mode-hook 'my-org-mode-visual-tweaks)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my-adjoin-to-list-or-symbol (element list-or-symbol)
  (let ((list (if (not (listp list-or-symbol))
                  (list list-or-symbol)
                list-or-symbol)))
    (require 'cl-lib)
    (cl-adjoin element list)))

(custom-theme-set-faces
 'user
 '(org-block ((t (:inherit fixed-pitch))))
 '(org-code ((t (:inherit (shadow fixed-pitch)))))
 '(org-document-info ((t (:foreground "dark orange"))))
 '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
 '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
 '(org-link ((t (:foreground "royal blue" :underline t))))
 '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-property-value ((t (:inherit fixed-pitch))) t)
 '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
 '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
 '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+END_SRC

** Org-Agenda
:PROPERTIES:
:ID:       9a602078-bdff-4044-9da2-03c1601a5a20
:END:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      '(("d" "Custom Day Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-agenda-include-diary t)
                      (org-agenda-show-log t)
                      (org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s %e ")))
                      (org-agenda-time-grid '((daily today) (600 800 1000 1200 1400 1600 1800 2000 2200) "......" "----------------"))))))))
#+END_SRC

** Set Custom Todo Keywords
   :PROPERTIES:
   :ID: 22fa63d3-9cf3-4025-b9a5-13b58b30bcc6
   :END:

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO(t)" "PROC(p)" "|" "DONE(d!)" "CANCEL(c)")))

(setq org-todo-keyword-faces '(("TODO" . (:foreground "red" :weight bold))
                               ("PROC" . (:foreground "yellow" :weight bold))
                               ("DONE" . (:foreground "green" :weight bold))
                               ("CANCEL" . (:foreground "blue" :weight bold))))
#+END_SRC

** Set Custom Org Tags
   :PROPERTIES:
   :ID: 92dcb754-3904-4b71-b403-401580a7a359
   :END:

#+BEGIN_SRC emacs-lisp
(setq org-tag-alist '((:startgroup)
                      ("@dev" . ?d) ("@home" . ?h) ("@english" . ?e)
                      ("@meeting" . ?m) ("@chill" . ?c)
                      (:endgroup)
                      ("laptop" . ?l) ("book" . ?b) ("video" . ?v)))

(setq org-tag-faces
      '(("english" . (:foreground "#FFB6C1" :weight bold)) ; Soft pink
        ("newtend" . (:foreground "#90EE90" :weight bold)) ; Light green
        ("proxyua" . (:foreground "#00FA9A" :weight bold)))) ; Green with aqua (Medium Spring Green)
#+END_SRC

** Org Capture
   :PROPERTIES:
   :ID: 51173503-66a0-4cd4-b196-c00d26d26182
   :END:

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline (concat org-directory "workspace/workspace.org") "Workspace")
         "* TODO %?\n %i\n %a"  :empty-lines 1)
        ("r" "Refile" entry (file+headline (concat org-directory "workspace/workspace.org") "Refile")
         "* TODO %?\n %i\n %a"  :empty-lines 1)
        ("j" "Journal" entry (file+olp+datetree (concat org-directory "workspace/journal.org") "Journal")
         "* %?\nEntered on %U\n %i\n %a" :empty-lines 1)))
#+END_SRC

** Org Agenda
   :PROPERTIES:
   :ID: 98def581-d254-4608-8b66-dec9111dbd25
   :END:

#+BEGIN_SRC emacs-lisp
;; Set org agenda window to open in the current window
(setq org-agenda-window-setup 'current-window)

;; Skip scheduled items in the agenda if a deadline is present
(setq org-agenda-skip-scheduled-delay-if-deadline t)

;; Set org agenda span to show only the current day's tasks
(setq org-agenda-span 'day)

;; Customize org agenda time grid
(setq org-agenda-time-grid '((daily today remove-match)
                             (0600 0800 1000 1200 1400 1600 1800 2000 2200)
                             "   " "..............."))
#+END_SRC

** Org-Bullets
   :PROPERTIES:
   :ID: e5387b92-7a46-4e1d-b5b6-f311259a0b63
   :END:

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "◉" "○" "◉")))
#+END_SRC

** Logging time
:PROPERTIES:
:ID:       0660ba76-62fe-413d-9843-89801acdde0d
:END:

*** Log clock time in the LOGBOOK drawer
:PROPERTIES:
:ID:       2ef3d603-f3ac-417e-b697-c879f86ee8e4
:END:

#+BEGIN_SRC emacs-lisp
(defun bh/remove-empty-drawer-on-clock-out ()
  "Remove empty LOGBOOK drawers on clock out."
  (interactive)
  (save-excursion
    (beginning-of-line 0)
    (org-remove-empty-drawer-at "LOGBOOK" (point))))

(add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)

(setq org-drawers '("PROPERTIES" "LOGBOOK"))
(setq org-clock-into-drawer t)
(setq org-log-state-notes-insert-after-drawers nil)
(custom-set-variables '(org-log-into-drawer t))
#+END_SRC

*** Configure clock settings
   :PROPERTIES:
   :ID: 31d8e92a-7f48-4611-a38b-5ad565f171ac
   :END:

#+BEGIN_SRC emacs-lisp
(org-clock-persistence-insinuate)
(setq org-clock-persist t)
(setq org-clock-in-resume t)
(setq org-clock-persist-query-resume nil)
(setq org-clock-out-when-done t)
(setq org-clock-auto-clock-resolution 'when-no-clock-is-running)
(setq org-clock-report-include-clocking-task t)
(setq org-pretty-entities t)
#+END_SRC

*** Enable clock history
:PROPERTIES:
:ID:       b6f05726-8aae-4024-a930-c77989e68719
:END:

#+BEGIN_SRC emacs-lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
#+END_SRC

*** Customize timestamp format
:PROPERTIES:
:ID:       b0e2aaaa-f301-4bad-91f1-07db56a805cc
:END:

#+BEGIN_SRC emacs-lisp
;(setq org-time-stamp-formats '(("<%Y-%m-%d %a>")
;                              ("<%Y-%m-%d %a %H:%M:%S>")))
#+END_SRC

*** Customize clock sum format
   :PROPERTIES:
   :ID: 9a5f0b1a-8cc8-4e05-917b-2f2d920838ab
   :END:

#+BEGIN_SRC emacs-lisp
(setq org-duration-format 'h:mm)
#+END_SRC

*** Automatically add CREATED property to all todos
   :PROPERTIES:
   :ID: 5e95b441-a159-4899-915e-e9970a2f3736
   :END:

#+BEGIN_SRC emacs-lisp
(defvar org-created-property-name "CREATED"
  "The name of the org-mode property that stores the creation date of the entry")

(defun org-set-created-property (&optional active NAME)
  "Set a property on the entry giving the creation time."
  (let* ((created (or NAME org-created-property-name))
         (fmt (if active "<%s>" "[%s]"))
         (now (format fmt (format-time-string "%Y-%m-%d %a %H:%M"))))

    (unless (org-entry-get (point) created nil)
      (org-set-property created now))))

(add-hook 'org-insert-heading-hook
          (lambda ()
            (save-excursion
              (org-back-to-heading)
              (org-set-created-property))))
#+END_SRC

** Org-ID for each tasks
   :PROPERTIES:
   :ID: 0222f813-8fc0-4abd-98e7-b9f2482f5dee
   :END:

#+BEGIN_SRC emacs-lisp
(require 'org-id)

(defun my-org-add-ids-to-headlines-in-file ()
  "Add ID properties to all headlines in the current file."
  (org-map-entries 'org-id-get-create))

(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'my-org-add-ids-to-headlines-in-file nil 'local)))

(add-hook 'org-capture-prepare-finalize-hook 'org-id-get-create)
#+END_SRC

*** Set default column view format for org time block report
:PROPERTIES:
:ID:       82ee68a1-0306-4038-abb5-1b47099f4311
:END:
#+BEGIN_SRC emacs-lisp
(setq org-columns-default-format "%50ITEM(Task) %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM")
#+END_SRC

** ON Source Code
   :PROPERTIES:
   :ID: 0f37b38b-247f-4e5d-8eb5-098399788749
   :END:

*** Code Block Settings
:PROPERTIES:
:ID:       4e100a1b-1ca8-44cd-98fb-614fb2573809
:END:

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)

(setq org-src-preserve-indentation t)
(setq org-babel-execute-src-block t)
(setq org-babel-results-keyword t)
(setq org-babel-tangle-jump-to-org t)
(setq padline t)
(setq org-babel-results-keyword "RESULTS")
(setq org-confirm-babel-evaluate nil)
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-insert-structure-template t)
#+END_SRC

*** Customize Source Blocks 
:PROPERTIES:
:ID:       90e4b721-2c36-4eb0-a3e6-6b3b197cba3e
:END:

#+BEGIN_SRC emacs-lisp
;; Customize the faces for source code blocks in Org mode
(custom-set-faces
  '(org-block ((t (:extend t :background "#2e3440"))))
  '(org-block-begin-line ((t (:extend t :foreground "#d8dee9"))))
  '(org-block-end-line ((t (:extend t :foreground "#d8dee9"))))
  '(org-code ((t (:foreground "#d8dee9")))))

;; Set a fixed width font for source code blocks
(set-face-attribute 'org-block nil :inherit 'fixed-pitch)
#+END_SRC

*** Org Babel set Languages
    :PROPERTIES:
    :ID: 90311705-5299-4b73-9d88-e9f4b601d887
    :END:

#+BEGIN_SRC emacs-lisp
;; Enable various languages for org-babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (lisp . t)
   (gnuplot . t)
   (python . t)
   (shell . t)
   (org . t)
   (latex . t)
   (python . t)
   (sql . nil)
   (sqlite . t)
   (ditaa . t)
   (js . t)))

;; Customize evaluation confirmation for specific languages
(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for specific languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC

#+RESULTS:
: my-org-confirm-babel-evaluate

** Task Set Estimate
   :PROPERTIES:
   :ID: 1851e1e4-a28c-46c1-83cf-6d8a256564fe
   :END:

#+BEGIN_SRC emacs-lisp
(defun my-set-org-effort ()
  "Prompt user to set the Effort property with shortcuts."
  (interactive)
  (let* ((choices '(("1" . "0:10")
                    ("2" . "0:20")
                    ("3" . "0:30")
                    ("4" . "0:40")
                    ("5" . "1:00")))
         (input (char-to-string (read-char-choice "Effort [1:0:10, 2:0:20, 3:0:30, 4:0:40, 5:1:00]: " 
                                                  (string-to-list "12345"))))
         (effort-value (cdr (assoc input choices))))
    (org-set-property "Effort" effort-value)))

;; Bind the function to a key, e.g., C-c e
(define-key org-mode-map (kbd "C-c e") 'my-set-org-effort)

(setq org-global-properties
      '(("Effort_ALL" . "0:10 0:20 0:30 0:40 1:00 1:30 2:00 3:00 5:00")
        ("STYLE_ALL" . "habit")))

(setq org-time-clocksum-use-effort-durations t)
#+END_SRC

** Calendar 3rd party
:PROPERTIES:
:ID:       9d8eff5e-e533-4d31-8245-f1521a8789cb
:END:

#+BEGIN_SRC emacs-lisp
;; Docs -- https://github.com/kiwanami/emacs-calfw?tab=readme-ov-file#cfwmodel
(use-package calfw
  :ensure t
  :config
  (require 'calfw-org))

(use-package calfw-org
  :ensure t
  :config
  (setq cfw:org-overwrite-default-keybinding t)
  (setq cfw:org-agenda-schedule-args '(:scheduled :deadline :timestamp))
)

;; First day of the week
(setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday

;; set hight of day by default
;(cfw:create-calendar-component-region :height 10)

;; styles
(custom-set-faces
 '(cfw:face-title ((t (:foreground "#f0dfaf" :weight bold :height 2.0 :inherit variable-pitch))))
 '(cfw:face-header ((t (:foreground "#d0bf8f" :weight bold))))
 '(cfw:face-sunday ((t :foreground "#cc9393" :background "grey10" :weight bold)))
 '(cfw:face-saturday ((t :foreground "#8cd0d3" :background "grey10" :weight bold)))
 '(cfw:face-holiday ((t :background "grey10" :foreground "#8c5353" :weight bold)))
 '(cfw:face-grid ((t :foreground "DarkGrey")))
 '(cfw:face-default-content ((t :foreground "#bfebbf")))
 '(cfw:face-periods ((t :foreground "cyan")))
 '(cfw:face-day-title ((t :background "grey10")))
 '(cfw:face-default-day ((t :weight bold :inherit cfw:face-day-title)))
 '(cfw:face-annotation ((t :foreground "RosyBrown" :inherit cfw:face-day-title)))
 '(cfw:face-disable ((t :foreground "DarkGray" :inherit cfw:face-day-title)))
 '(cfw:face-today-title ((t :background "#7f9f7f" :weight bold)))
 '(cfw:face-today ((t :background: "grey10" :weight bold)))
 '(cfw:face-select ((t :background "#2f2f2f")))
 '(cfw:face-toolbar ((t :foreground "Steelblue4" :background "Steelblue4")))
 '(cfw:face-toolbar-button-off ((t :foreground "Gray10" :weight bold)))
 '(cfw:face-toolbar-button-on ((t :foreground "Gray50" :weight bold))))

(defun my-open-calendar ()
  "Open the calendar view with org-agenda."
  (cfw:open-org-calendar))

;; open calendar
(defun toggle-calendar ()
  "Toggle the calendar window."
  (if (get-buffer "*cfw-calendar*")
      (kill-buffer "*cfw-calendar*")
    (my-open-calendar)))

(global-set-key (kbd "C-c t") 'toggle-calendar)  ; Add another keybinding to toggle
#+END_SRC

** Org-Timeblock
:PROPERTIES:
:ID:       36c4dc6a-2e07-4c4d-8b9c-ac4360233722
:END:

#+BEGIN_SRC emacs-lisp
(use-package org-timeblock
  :ensure t
  :bind ("C-c s" . org-timeblock)
  :config
  (setq org-timeblock-files (directory-files-recursively "/home/andrew/workspace/org/workspace/" "\\.org$"))
  (setq org-timeblock-inbox-file "/home/andrew/workspace/org/workspace/inbox.org")
)

#+END_SRC


* Programming
:PROPERTIES:
:ID:       753555db-2d5d-4685-b9e3-34b95222034b
:END:

** Autocomplete
:PROPERTIES:
:ID:       8feaed37-fd56-4c09-946f-1083bf65907b
:END:

*** flycheck-pycheckers
:PROPERTIES:
:ID:       ce5e4dec-31dd-479b-afa7-7bee4610f2fb
:END:

#+BEGIN_SRC emacs-lisp
(use-package flycheck-pycheckers
  :ensure t
  :config
  (with-eval-after-load 'flycheck
    (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup)
    (flycheck-add-next-checker 'python-flake8 'python-pylint)))
#+END_SRC

*** flyckeck-mode
:PROPERTIES:
:ID:       42338037-a425-4345-8233-6a2b2fd030d4
:END:

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
  :config
  (setq flycheck-indication-mode 'right-fringe))
#+END_SRC

*** company and lsp
:PROPERTIES:
:ID:       d73f9706-2193-4b09-9925-8ba517935473
:END:

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook ((python-mode . lsp-deferred))
  :custom (read-process-output-max (* 1024 1024))
  :init
  ;(setq lsp-completion-provide :none)
  ;(setq lsp-diagnostic-provider :flycheck)
  :config
  (define-key lsp-mode-map [tab] 'lsp-tab-completion-or-next-field)
  ;; Point to the pylsp executable in your virtualenv
  (setq lsp-python-ms-executable "~/.virtualenvs/3.11/bin/pylsp")
  (setq lsp-python-executable-cmd "~/.virtualenvs/3.11/bin/python")
  ;; Other lsp-mode configurations...
  (setq lsp-disabled-clients '(pyls))
)

(defun lsp-tab-completion-or-next-field ()
  (interactive)
  (or (yas-expand)
      (company-complete-common-or-cycle)
      (yas-next-field)))

(use-package company
  :after lsp-mode
  :hook (prog-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.2)
  (company-show-numbers nil)
  :ensure t
  :config
  (global-company-mode)
  (define-key company-active-map (kbd "TAB") 'company-complete-selection)
  (define-key company-active-map [tab] 'company-complete-selection)
  (setq company-backends
        '((company-jedi company-files company-keywords company-capf company-yasnippet)))
  (setq company-tooltip-align-annotations t
        company-tooltip-flip-when-above t))

;; Adjust company keybindings
(with-eval-after-load 'company
  (define-key company-active-map (kbd "<tab>") 'lsp-tab-completion-or-next-field)
  (define-key company-active-map (kbd "TAB") 'company-complete-selection)
  (define-key company-active-map (kbd "TAB-SPC") 'company-complete))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Optionally use lsp-ui for fancy UI integrations (popups for function signatures, peek, etc.)
(use-package lsp-ui
  :ensure t
  :after lsp-mode
  :commands lsp-ui-mode
  :hook (lsp-mode . lsp-ui-mode)
  :bind (:map lsp-mode-map
          ("C-c d" . lsp-ui-doc-show))
  :config
  ;; Enable the documentation pop-up
  (setq lsp-ui-doc-enable t
        ; Don't show doc on cursor hover
        lsp-ui-doc-show-with-cursor nil
        ; Show doc on mouse hover
        lsp-ui-doc-show-with-mouse t

        ;; Position the documentation frame at point
        lsp-ui-doc-position 'at-point
        ;; Show the documentation frame after a delay (in seconds)
        lsp-ui-doc-delay 0.5
        ;; Use a border for the documentation frame
        lsp-ui-doc-use-childframe t
        lsp-ui-doc-use-webkit t
        ;; Set the maximum width and height of the documentation frame
        lsp-ui-doc-max-width 150
        lsp-ui-doc-max-height 30
        ;; Set the background and foreground colors
        lsp-ui-doc-background "#1e1e1e"
        lsp-ui-doc-border "#c678dd"
        ;; Use a custom font for the documentation frame
        lsp-ui-doc-font '("Source Code Pro" . 12))
    :bind
    (:map lsp-ui-mode-map
        ("C-c d" . lsp-ui-doc-show)        ; Show doc window
        ("C-c D" . lsp-ui-doc-hide)        ; Hide doc window
        ("M-?" . lsp-ui-doc-glance))      ; Temporarily show doc
  
  ;; Customize the sideline diagnostics
  (setq lsp-ui-sideline-enable t
        lsp-ui-sideline-show-hover t
        lsp-ui-sideline-show-code-actions t
        lsp-ui-sideline-show-diagnostics t
        lsp-ui-sideline-ignore-duplicate t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :ensure t
  :bind (("C-c C-d" . helpful-at-point)))
#+END_SRC

** Project & git
:PROPERTIES:
:ID:       b36b284f-3dcb-4d8e-832d-47fb91c15c96
:END:

*** Magit
:PROPERTIES:
:ID:       87e442ff-2b3a-4a3d-b7ce-10ab2734a72f
:END:

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-c g" . magit-status)
  :config
  (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1))
#+END_SRC

#+RESULTS:
: magit-status

*** Git-Gutter
:PROPERTIES:
:ID:       d828a30d-7584-4c63-a31f-4e937f55d0dd
:END:

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :ensure t
  :init
  (progn
    (global-git-gutter-mode t)
    (add-hook 'ruby-mode-hook 'git-gutter-mode)
    (add-hook 'python-mode-hook 'git-gutter-mode))
  :custom
  (git-gutter:modified-sign "  ")
  (git-gutter:added-sign "++")
  (git-gutter:deleted-sign "--")
  ;; Uncomment the following lines to customize the colors
  ;; (git-gutter:modified (quote ("purple" . nil)))
  ;; (git-gutter:added (quote ("green" . nil)))
  ;; (git-gutter:deleted (quote ("red" . nil)))
)
#+END_SRC

*** Projectile
:PROPERTIES:
:ID:       9d87f289-83d8-4227-8e5d-8c8e045bb8e4
:END:

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands (projectile-mode projectile-switch-project)
  :bind (("C-c p p" . projectile-switch-project)
         ("C-c p a" . projectile-add-known-project)
         ("C-c p g" . projectile-grep)
         ("C-c p f" . projectile-find-file))
  :config
  (projectile-global-mode t)
  (setq projectile-enable-caching t)
  (setq projectile-switch-project-action 'projectile-dired))
#+END_SRC

** Frontend
:PROPERTIES:
:ID:       93eae05b-0759-4fc5-92cc-be068f89b04c
:END:

*** Sass-Mode
:PROPERTIES:
:ID:       0b84c0a1-8f29-4ed2-9874-0c9ff17b2c66
:END:

#+BEGIN_SRC emacs-lisp
(use-package sass-mode
  :ensure t
  :config (setq sass-indent-offset 2))
#+END_SRC

*** Web-Beautify-Mode
:PROPERTIES:
:ID:       a20d76f2-f1e9-4998-b9ea-e1d459507d5c
:END:

Docs: https://github.com/yasuyk/web-beautify

#+BEGIN_SRC emacs-lisp
(use-package web-beautify
  :ensure t
  :commands (web-beautify-css
             web-beautify-css-buffer
             web-beautify-html
             web-beautify-html-buffer
             web-beautify-js
             web-beautify-js-buffer))

#+END_SRC

*** Rainbow-mode
:PROPERTIES:
:ID:       1b96e88f-b261-4303-a47c-e88d23731807
:END:

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :delight
  :hook (css-mode sass-mode)
)
#+END_SRC

*** Rainbow delimiters
:PROPERTIES:
:ID:       1b96e88f-b261-4303-a47c-e88d23731807
:END:

make brackets colorfull

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode)
  :hook (org-mode . rainbow-delimiters-mode)
  :hook (python-mode . rainbow-delimiters-mode)
  :config
  (set-face-foreground 'rainbow-delimiters-depth-1-face "#E06C75")
  (set-face-foreground 'rainbow-delimiters-depth-2-face "#E5C07B")
  (set-face-foreground 'rainbow-delimiters-depth-3-face "#98C379")
  (set-face-foreground 'rainbow-delimiters-depth-4-face "#56B6C2")
  (set-face-foreground 'rainbow-delimiters-depth-5-face "#61AFEF")
  (set-face-foreground 'rainbow-delimiters-depth-6-face "#C678DD")
  (set-face-foreground 'rainbow-delimiters-depth-7-face "#BE5046")
  (set-face-foreground 'rainbow-delimiters-depth-8-face "#ABB2BF")
  (set-face-foreground 'rainbow-delimiters-depth-9-face "#5C6370"))
#+END_SRC

*** Multiple Cursors
:PROPERTIES:
:ID:       73e6166a-c123-4411-aa32-899ae72e021a
:END:

Docs: https://github.com/magnars/multiple-cursors.el/issues/105

#+BEGIN_SRC
(use-package multiple-cursors
  :ensure t
  :bind (("C-c m e"    . mc/edit-lines)
         ("C-c m n"    . mc/mark-next-like-this)
         ("C-c m p"    . mc/mark-previous-like-this)
         ("C-c m a"    . mc/mark-all-like-this)
         ("C-c m t"    . mc/mark-next-symbol-like-this)
         ("C-c m d"    . mc/mark-all-dwim)))


;(global-set-key (kbd "C-c .") 'mc/mark-next-like-this)
;(global-set-key (kbd "C->") 'mc/mark-next-like-this)
;(global-set-key (kbd "C-c ,") 'mc/mark-previous-like-this)
;(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
;(global-set-key (kbd "C-c C-l") 'mc/mark-all-like-this)
#+END_SRC

*** Web-Mode
:PROPERTIES:
:ID:       463f226d-2e5a-4a5b-9b84-4a8a952f9e0d
:END:

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode ("\\.html\\'" . web-mode)
  :init
  (setq web-mode-enable-current-element-highlight t)
  :config
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-auto-expanding t)
  (setq web-mode-enable-css-colorization t)
  ;; Uncomment the following line to enable auto-quoting
  ;; (setq web-mode-enable-auto-quoting t)
)
#+END_SRC

*** Emmet Mode
:PROPERTIES:
:ID:       305ba2b4-881d-4a39-a6cd-d69e2f7f1da5
:END:

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :ensure t
  :commands emmet-mode
  :init
  (setq emmet-indentation 2)
  :config
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
  (add-hook 'sass-mode-hook 'emmet-mode)
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'rjsx-mode-hook 'emmet-mode)
)
#+END_SRC

*** Vue-Mode
:PROPERTIES:
:ID:       6b79868f-141a-4083-8d5b-6d2b4bba7fd3
:END:

#+BEGIN_SRC emacs-lisp
(use-package vue-mode
  :ensure t
  :config
  (add-hook 'vue-mode-hook 'company-mode))
#+END_SRC

*** React-mode
:PROPERTIES:
:ID:       a85c71b5-6f9a-47df-9f29-6b4fc2f3b60c
:END:

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :ensure t)
#+END_SRC

*** Prettier
:PROPERTIES:
:ID:       e93b6229-2212-4375-8624-ae4402f25fe2
:END:

#+BEGIN_SRC emacs-lisp
(use-package prettier
  :ensure t)
#+END_SRC

*** js2-mode
:PROPERTIES:
:ID: 2dc5d0f3-3f17-4197-b0f6-67815ae6162f
:END:

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :mode ("\\.js\\'" . js2-mode)
  :interpreter ("node" . js2-mode)
  :config
  (setq js2-basic-offset 2)
  (setq js2-strict-trailing-comma-warning nil)
  (setq js2-strict-missing-semi-warning nil)
  (setq js2-mode-show-strict-warnings nil)
  (setq js-indent-level 2)
  (add-hook 'js2-mode-hook 'company-mode))
#+END_SRC

** Backend
:PROPERTIES:
:ID:       ed5ba3f4-bf4e-4a38-a1fe-efa16b0338dd
:END:

*** Pyenv
:PROPERTIES:
:ID:       44a8c951-68a0-4a68-a331-11ccc5d9381c
:END:

#+BEGIN_SRC emacs-lisp
;; pyenv configuration
(use-package pyenv-mode
  :ensure t
  :config
  ;; if you set the global version to 3.9, you don't need the line below
  ;; otherwise, you can set a default version for Emacs to use here
  (setenv "PYENV_VERSION" "3.11.0")
)

;(venv-workon "market")
#+END_SRC

*** Pylint
:PROPERTIES:
:CREATED:  [2023-07-17 Mon 13:52]
:ID:       d3af85f6-b0e1-4c3e-99f0-d48856e244c3
:END:

#+BEGIN_SRC
;; Pylint
(use-package pylint
  :ensure t
  :init
  (autoload 'pylint "pylint")
  (add-hook 'python-mode-hook 'pylint-add-menu-items)
  (add-hook 'python-mode-hook 'pylint-add-key-bindings)
)
#+END_SRC

and in ~/HOME_DIR/.pylintrc

https://github.com/adafruit/Adafruit_Learning_System_Guides/blob/master/.pylintrc 

example 

#+BEGIN_SRC sh
[MESSAGES CONTROL]
disable=import-error,print-statement

[REPORTS]
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)
#+END_SRC

*** Pytest
:PROPERTIES:
:ID:       f8c93462-40a9-4d4f-9847-467d4190ce76
:END:

#+BEGIN_SRC emacs-lisp 
(use-package pytest
    :ensure t
    :bind ("C-c t" . pytest-all)
    :bind ("C-c i" . pytest-one)
    :bind ("C-c m" . pytest-module)
    :bind ("C-c d" . pytest-pdb-all)
    :bind ("C-t" . pytest-all)
)

(add-hook 'elpy-mode-hook (lambda () (elpy-shell-toggle-dedicated-shell 1)))

;(add-to-list 'pytest-project-names "/home/andrew/workspace/work/market/market-backend/apps")
;(add-to-list 'pytest-project-root-files "pytest.ini")

(add-hook 'python-mode-hook
          (lambda ()
            ;(local-set-key "\C-ca" 'pytest-all)
            ;(local-set-key "\C-cm" 'pytest-module)
            (local-set-key "\C-c." 'pytest-one)
            (local-set-key "\C-cc" 'pytest-again)
            (local-set-key "\C-cd" 'pytest-directory)
            (local-set-key "\C-cpa" 'pytest-pdb-all)
            (local-set-key "\C-cpm" 'pytest-pdb-module)
            (local-set-key "\C-cp." 'pytest-pdb-one)))

;((python-mode
;  (pytest-global-name . "xe test")
;  (pytest-cmd-flags . "")))
#+END_SRC

*** Virtualenvwrapper
:PROPERTIES:
:ID:       7a6b4d0b-a51c-4014-8c37-d4b50210e45f
:END:

https://github.com/porterjamesj/virtualenvwrapper.el

#+BEGIN_SRC emacs-lisp
(use-package virtualenvwrapper
  :ensure t
  :init
  (setq venv-location "~/.virtualenvs/")
  :config
  (venv-initialize-interactive-shells)
  (venv-initialize-eshell))

(add-hook 'venv-postmkvirtualenv-hook
          (lambda () (shell-command "pip install pytest pylint flake8 jedi elpy python-coverage>=4.0")))
#+END_SRC

*** Python-mode
:PROPERTIES:
:ID:       44f0b360-c33c-4884-8ecd-9dbd4adf2ab0
:END:

#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :ensure t
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :config
  (setq python-shell-interpreter "~/.virtualenv/3.10/bin/python")
  :config
  (add-hook 'python-mode-hook 'company-mode)
)
#+END_SRC

** Usefull
:PROPERTIES:
:ID:       86efd323-7ece-4f4b-a305-69256e9991c0
:END:

*** Markdown
:PROPERTIES:
:ID:       46c3cc0c-cd33-4fe9-b83d-1d3495d3f5b9
:END:

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.markdown\\'" . markdown-mode)
         ("\\.md\\'"       . markdown-mode)))
#+END_SRC

*** GPTel
:PROPERTIES:
:ID:       5f55fcce-775a-404e-b89b-eac287b14077
:END:

#+BEGIN_SRC emacs-lisp
(use-package gptel
  :ensure t
  :config
  ;; Retrieve the API key from the system environment
  (setq gptel-api-key (getenv "GPTEL_API_KEY")) ;; Replace "GPTEL_API_KEY" with your actual environment variable name
  (setq gptel-model "gpt-4o")
  )

;; OPTIONAL configuration
;(setq
; gptel-model   "Local_LLM"
; gptel-backend
; (gptel-make-openai "Local_LLM"
;   :protocol "http"
;   :host "192.168.1.18:1234"
;   :key "lm-studio"
;   :endpoint "/v1/chat/completions"
;   :stream t
;   :models '(
;      "lmstudio-community/Meta-Llama-3-8b-Instruct-GGUF"
;)))

(global-set-key (kbd "C-c C-g") 'gptel-send)
(global-set-key (kbd "C-c C-m") 'gptel-menu)
#+END_SRC

** Doom-modeline
:PROPERTIES:
:ID:       96dfd3cc-05d4-452e-9b8d-c929e23df55f
:END:

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :init
  (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 25)
  (setq doom-modeline-bar-width 3)
  (setq doom-modeline-icon t)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-major-mode-color-icon t)
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project))
#+END_SRC

*** All Icons
:PROPERTIES:
:ID:       96cfdec0-a79c-4f4a-91ca-6e320419408f
:END:

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode 1)
#+END_SRC

*** Add Emoji
:PROPERTIES:
:ID:       546a77d4-8dc8-4323-815a-f4590333ee34
:END:

#+BEGIN_SRC emacs-lisp
;; Main emoji package
(use-package emojify
  :ensure t
  :hook (after-init . global-emojify-mode)
  :config
  ;; Set proper emoji font
  (when (member "Segoe UI Emoji" (font-family-list))
    (set-fontset-font t 'symbol (font-spec :family "Segoe UI Emoji") nil 'prepend))
  
  ;; Display settings
  (setq emojify-display-style 'unicode)
  (setq emojify-emoji-styles '(unicode))
  
  ;; Enable emoji in buffer
  (add-hook 'after-init-hook #'global-emojify-mode)

  :bind
  (("C-c i" . emojify-insert-emoji)    ; Insert emoji
   ("C-c E" . emojify-apropos-emoji))) ; Search emoji
#+END_SRC

*** Aider
:PROPERTIES:
:ID:       1b27f4b7-e345-4dfb-962b-0457511df785
:END:

*Install*

#+BEGIN_SRC emacs-lisp
;; (package-vc-install '(aider :url "https://github.com/tninja/aider.el"))
;; (package! aider :recipe (:host github :repo "tninja/aider.el" :files ("aider.el" "aider-doom.el")))
#+END_SRC

*Usage*

#+BEGIN_SRC emacs-lisp
(use-package aider
  :config
  (setq aider-args '("--model" "mini"))
  ;; Bind the transient menu to C-c f

  ;; Optional: You can define other models by uncommenting and configuring
  ;; (setenv "OPENAI_API_KEY" "sk-...")
  (setq aider-args `("--config" ,(expand-file-name "~/.aider.conf.yml")))
  (global-set-key (kbd "C-c f") 'aider-transient-menu)
)
#+END_SRC

