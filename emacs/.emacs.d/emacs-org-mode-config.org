* Org-Mode
:PROPERTIES:
:ID:       98bbe6a0-d083-482e-b8c3-02e614465a54
:END:

** org-init
   :PROPERTIES:
   :ID: d8debe44-8997-48e6-af02-47de3be207fe
   :END:

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :pin manual)

#+END_SRC

** Org Files and
   :PROPERTIES:
   :ID: 6ed4d139-0420-4e09-acfb-95bb938be86d
   :END:
   :LOGBOOK:
   - State "ON"         from "OFF"        [2023-10-31 вт 12:42]
   :END:

#+BEGIN_SRC emacs-lisp
;; Associate .org and .org_archive with org-mode
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))

;; Disable automatic line breaking in Org mode
(add-hook 'org-mode-hook (lambda () (auto-fill-mode -1)))

(setq org-dir
      (cond
       ((eq system-type 'darwin) "/Users/andrew/org")
       ((eq system-type 'gnu/linux) "/home/andrew/workspace/org")))

;; Recursively find all .org files in org-dir
(setq org-agenda-files
      (directory-files-recursively org-dir "\\.org$"))
#+END_SRC

#+RESULTS:
| /home/andrew/workspace/org/work/market.org | /home/andrew/workspace/org/work/proxyzeus.org | /home/andrew/workspace/org/workspace/dairy.org | /home/andrew/workspace/org/workspace/english.org | /home/andrew/workspace/org/workspace/ideas_2025.org | /home/andrew/workspace/org/workspace/inbox.org | /home/andrew/workspace/org/workspace/newtend.org | /home/andrew/workspace/org/workspace/proxy_ua.org | /home/andrew/workspace/org/workspace/rest.org | /home/andrew/workspace/org/workspace/workspace.org | /home/andrew/workspace/org/books.org | /home/andrew/workspace/org/english.org | /home/andrew/workspace/org/homework.org | /home/andrew/workspace/org/self_dev.org | /home/andrew/workspace/org/workspace.org |



** ON org-theme pretty
:PROPERTIES:
:CREATED:  [2023-10-23 пн 14:46]
:ID:       eb4c441b-227c-4890-9be4-2e8acee039ff
:END:

#+BEGIN_SRC emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:foreground "#E1E1E0" :weight bold :height 1.3))))
 '(org-level-2 ((t (:foreground "#D6BBB5" :weight bold :height 1.2))))
 ;; ... customize other org-level faces similarly ...
 '(org-document-title ((t (:foreground "#EFBBBF" :weight bold :height 1.5))))
 '(org-done ((t (:foreground "#5A7E63" :weight bold))))
 '(org-todo ((t (:foreground "#B57660" :weight bold)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my-org-mode-visual-tweaks ()
  (setq line-spacing 0.3) ; adjust the line spacing
  (variable-pitch-mode 1) ; use variable pitch fonts
  )
(add-hook 'org-mode-hook 'my-org-mode-visual-tweaks)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun my-adjoin-to-list-or-symbol (element list-or-symbol)
  (let ((list (if (not (listp list-or-symbol))
                  (list list-or-symbol)
                list-or-symbol)))
    (require 'cl-lib)
    (cl-adjoin element list)))

(custom-theme-set-faces
 'user
 '(org-block ((t (:inherit fixed-pitch))))
 '(org-code ((t (:inherit (shadow fixed-pitch)))))
 '(org-document-info ((t (:foreground "dark orange"))))
 '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
 '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
 '(org-link ((t (:foreground "royal blue" :underline t))))
 '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-property-value ((t (:inherit fixed-pitch))) t)
 '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
 '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
 '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
#+END_SRC

#+RESULTS:

** Custom Agenda views
:PROPERTIES:
:ID:       9a602078-bdff-4044-9da2-03c1601a5a20
:END:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      '(("d" "Custom Day Overview"
         ((agenda "" ((org-agenda-span 'day)
                      (org-agenda-include-diary t)
                      (org-agenda-show-log t)
                      (org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s %e ")))
                      (org-agenda-time-grid '((daily today) (600 800 1000 1200 1400 1600 1800 2000 2200) "......" "----------------"))))))))
#+END_SRC

#+RESULTS:
| d | Custom Day Overview | ((agenda  ((org-agenda-span 'day) (org-agenda-include-diary t) (org-agenda-show-log t) (org-agenda-prefix-format '((agenda .  %i %-12:c%?-12t% s %e ))) (org-agenda-time-grid '((daily today) (600 800 1000 1200 1400 1600 1800 2000 2200) ...... ----------------))))) |

** Todo Keywords
   :PROPERTIES:
   :ID: 22fa63d3-9cf3-4025-b9a5-13b58b30bcc6
   :END:

*** Configure todo keywords and their faces
:PROPERTIES:
:ID:       0afe7a33-dae1-49c1-a4c2-9bfb9b573e2a
:END:
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords '((sequence "TODO(t)" "PROC(p)" "|" "DONE(d!)" "CANCEL(c)")))

(setq org-todo-keyword-faces '(("TODO" . (:foreground "red" :weight bold))
                               ("PROC" . (:foreground "yellow" :weight bold))
                               ("DONE" . (:foreground "green" :weight bold))
                               ("CANCEL" . (:foreground "blue" :weight bold))))
#+END_SRC

#+RESULTS:
| TODO   | :foreground | red    | :weight | bold |
| PROC   | :foreground | yellow | :weight | bold |
| DONE   | :foreground | green  | :weight | bold |
| CANCEL | :foreground | blue   | :weight | bold |

** Org Tags
   :PROPERTIES:
   :ID: 92dcb754-3904-4b71-b403-401580a7a359
   :END:

*** Define org tags for grouping and categorizing tasks
:PROPERTIES:
:ID:       a215accb-5f9f-4eba-b772-8fcabc0b7206
:END:
#+BEGIN_SRC emacs-lisp
(setq org-tag-alist '((:startgroup)
                      ("@dev" . ?d) ("@home" . ?h) ("@english" . ?e)
                      ("@meeting" . ?m) ("@chill" . ?c)
                      (:endgroup)
                      ("laptop" . ?l) ("book" . ?b) ("video" . ?v)))
#+END_SRC

** Org Capture
   :PROPERTIES:
   :ID: 51173503-66a0-4cd4-b196-c00d26d26182
   :END:

*** Define org capture templates for quick note-taking
:PROPERTIES:
:ID:       cfa14506-fff3-46ec-a221-73e816702fc9
:END:
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/workspace/org/workspace/workspace.org" "Workspace")
         "* TODO %?\n %i\n %a"  :empty-lines 1)
        ("r" "Refile" entry (file+headline "~/workspace/org/workspace/workspace.org" "Refile")
         "* TODO %?\n %i\n %a"  :empty-lines 1)
        ("j" "Journal" entry (file+olp+datetree "~/workspace/org/workspace/journal.org" "Journal")
         "* %?\nEntered on %U\n %i\n %a" :empty-lines 1)))
#+END_SRC

** ON Keybindings
   :PROPERTIES:
   :ID: e7ea7036-c9c1-4a33-a596-65036d2b273b
   :END:

*** Set keybindings for quick access to org-related functions
:PROPERTIES:
:ID:       ff94109b-b9f2-431b-ac6e-59fecb12f1a4
:END:
#+BEGIN_SRC emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)

(setq org-use-speed-commands t)
#+END_SRC

** Org Agenda
   :PROPERTIES:
   :ID: 98def581-d254-4608-8b66-dec9111dbd25
   :END:
*** Custom time
:PROPERTIES:
:ID:       92fe8c93-0435-44ec-a12b-1ef74a15e5fd
:END:

#+BEGIN_SRC emacs-lisp
;; Customize timestamp format in Org mode
(setq org-time-stamp-custom-formats '("<%Y/%m/%d cp %H:%M>" . "<%Y/%m/%d cp %H:%M>"))
(setq org-display-custom-times t)
#+END_SRC

*** Set org agenda window to open in the current window
   :PROPERTIES:
   :ID: 5c917ce5-4cd2-412f-824e-d144e70ebd30
   :END:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-window-setup 'current-window)

;; Skip scheduled items in the agenda if a deadline is present
(setq org-agenda-skip-scheduled-delay-if-deadline t)
#+END_SRC

*** Set org agenda span to show only the current day's tasks
   :PROPERTIES:
   :ID: 1e5224ad-90ef-4235-b465-8cbf1f8ced60
   :END:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-span 'day)
#+END_SRC

*** Customize org agenda time grid
   :PROPERTIES:
   :ID: 535b47de-ce68-4470-b8fd-c8f7a8bb0b04
   :END:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-time-grid '((daily today remove-match)
                             (0600 0800 1000 1200 1400 1600 1800 2000 2200)
                             "   " "..............."))
#+END_SRC

** org-bullets
   :PROPERTIES:
   :ID: e5387b92-7a46-4e1d-b5b6-f311259a0b63
   :END:

*** Install and enable org-bullets mode for prettier bullets
:PROPERTIES:
:ID:       4ebc5141-ccaa-4984-a9be-4ea389b1a598
:END:
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "◉" "○" "◉")))
#+END_SRC

#+RESULTS:
| #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | (lambda nil (add-hook 'before-save-hook 'my-org-add-ids-to-headlines-in-file nil 'local)) | org-clock-load | org-bullets-mode | my-org-mode-visual-tweaks | (lambda nil (auto-fill-mode -1)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** Time
   :PROPERTIES:
   :ID: 440bcbf2-9b13-43b6-a7ea-ff4625653941
   :END:

*** Log clock time in the LOGBOOK drawer
   :PROPERTIES:
   :ID: 7634c113-a194-479c-aac3-780d36fc8e54
   :END:

#+BEGIN_SRC emacs-lisp
(defun bh/remove-empty-drawer-on-clock-out ()
  "Remove empty LOGBOOK drawers on clock out."
  (interactive)
  (save-excursion
    (beginning-of-line 0)
    (org-remove-empty-drawer-at "LOGBOOK" (point))))

(add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)

(setq org-drawers '("PROPERTIES" "LOGBOOK"))
(setq org-clock-into-drawer t)
(setq org-log-state-notes-insert-after-drawers nil)
(custom-set-variables '(org-log-into-drawer t))
#+END_SRC

*** Configure clock settings
   :PROPERTIES:
   :ID: 31d8e92a-7f48-4611-a38b-5ad565f171ac
   :END:

#+BEGIN_SRC emacs-lisp
(org-clock-persistence-insinuate)
(setq org-clock-persist t)
(setq org-clock-in-resume t)
(setq org-clock-persist-query-resume nil)
(setq org-clock-out-when-done t)
(setq org-clock-auto-clock-resolution 'when-no-clock-is-running)
(setq org-clock-report-include-clocking-task t)
(setq org-pretty-entities t)
#+END_SRC

*** Enable clock history
   :PROPERTIES:
   :ID: 282e8bb6-f7bb-42bb-8441-d2e29b585ecc
   :END:

#+BEGIN_SRC emacs-lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
#+END_SRC

*** Customize timestamp format
   :PROPERTIES:
   :ID: e3e0c6b2-7ba0-475c-8d6a-f4227c542191
   :END:

#+BEGIN_SRC emacs-lisp
;(setq org-time-stamp-formats '(("<%Y-%m-%d %a>")
;                              ("<%Y-%m-%d %a %H:%M:%S>")))
#+END_SRC

*** Customize clock sum format
   :PROPERTIES:
   :ID: 9a5f0b1a-8cc8-4e05-917b-2f2d920838ab
   :END:

#+BEGIN_SRC emacs-lisp
(setq org-duration-format 'h:mm)
#+END_SRC

*** Automatically add CREATED property to all todos
   :PROPERTIES:
   :ID: 5e95b441-a159-4899-915e-e9970a2f3736
   :END:

#+BEGIN_SRC emacs-lisp
(defvar org-created-property-name "CREATED"
  "The name of the org-mode property that stores the creation date of the entry")

(defun org-set-created-property (&optional active NAME)
  "Set a property on the entry giving the creation time."
  (let* ((created (or NAME org-created-property-name))
         (fmt (if active "<%s>" "[%s]"))
         (now (format fmt (format-time-string "%Y-%m-%d %a %H:%M"))))

    (unless (org-entry-get (point) created nil)
      (org-set-property created now))))

(add-hook 'org-insert-heading-hook
          (lambda ()
            (save-excursion
              (org-back-to-heading)
              (org-set-created-property))))
#+END_SRC

** org-id
   :PROPERTIES:
   :ID: 0222f813-8fc0-4abd-98e7-b9f2482f5dee
   :END:

#+BEGIN_SRC emacs-lisp
(require 'org-id)

(defun my-org-add-ids-to-headlines-in-file ()
  "Add ID properties to all headlines in the current file."
  (org-map-entries 'org-id-get-create))

(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'my-org-add-ids-to-headlines-in-file nil 'local)))

(add-hook 'org-capture-prepare-finalize-hook 'org-id-get-create)
#+END_SRC

** org-column-default-view
   :PROPERTIES:
   :ID: 742f15a3-d2cf-4a03-9d1c-6397d63fd2ab
   :END:

*** Set default column view format for org agenda
:PROPERTIES:
:ID:       82ee68a1-0306-4038-abb5-1b47099f4311
:END:
#+BEGIN_SRC emacs-lisp
(setq org-columns-default-format "%50ITEM(Task) %2PRIORITY %10Effort(Effort){:} %10CLOCKSUM")
#+END_SRC

** Source Code
   :PROPERTIES:
   :ID: 0f37b38b-247f-4e5d-8eb5-098399788749
   :END:

*** color customize
:PROPERTIES:
:ID:       90e4b721-2c36-4eb0-a3e6-6b3b197cba3e
:END:

#+BEGIN_SRC emacs-lisp
;; Customize the faces for source code blocks in Org mode
(custom-set-faces
  '(org-block ((t (:extend t :background "#2e3440"))))
  '(org-block-begin-line ((t (:extend t :foreground "#d8dee9"))))
  '(org-block-end-line ((t (:extend t :foreground "#d8dee9"))))
  '(org-code ((t (:foreground "#d8dee9")))))

;; Set a fixed width font for source code blocks
(set-face-attribute 'org-block nil :inherit 'fixed-pitch)

;; Add line numbers to source code blocks
(setq org-src-preserve-indentation t)
(setq org-src-tab-acts-natively t)
(setq org-src-fontify-natively t)

;; Syntax highlight source code blocks
(setq org-src-fontify-natively t)
#+END_SRC

*** Org Babel
    :PROPERTIES:
    :ID: 90311705-5299-4b73-9d88-e9f4b601d887
    :END:

#+BEGIN_SRC emacs-lisp
;; Enable various languages for org-babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (lisp . t)
   (gnuplot . t)
   (python . t)
   (shell . t)
   (org . t)
   (latex . t)
   (python . t)
   (sql . nil)
   (sqlite . t)
   (ditaa . t)
   (js . t)))

;; Customize evaluation confirmation for specific languages
(defun my-org-confirm-babel-evaluate (lang body)
  "Do not confirm evaluation for specific languages."
  (not (or (string= lang "C")
           (string= lang "java")
           (string= lang "python")
           (string= lang "emacs-lisp")
           (string= lang "sqlite"))))
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC

#+RESULTS:
: my-org-confirm-babel-evaluate

*** Source Block Settings
    :PROPERTIES:
    :ID: c4fabcb1-9078-4d14-9ab1-4b453ea67590
    :END:

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)

(setq org-src-preserve-indentation t)
(setq org-babel-execute-src-block t)
(setq org-babel-results-keyword t)
(setq org-babel-tangle-jump-to-org t)
(setq padline t)
(setq org-babel-results-keyword "RESULTS")
(setq org-confirm-babel-evaluate nil)
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-insert-structure-template t)
#+END_SRC

** Estimate
   :PROPERTIES:
   :ID: 1851e1e4-a28c-46c1-83cf-6d8a256564fe
   :END:

#+BEGIN_SRC emacs-lisp
(defun my-set-org-effort ()
  "Prompt user to set the Effort property with shortcuts."
  (interactive)
  (let* ((choices '(("1" . "0:10")
                    ("2" . "0:20")
                    ("3" . "0:30")
                    ("4" . "0:40")
                    ("5" . "1:00")))
         (input (char-to-string (read-char-choice "Effort [1:0:10, 2:0:20, 3:0:30, 4:0:40, 5:1:00]: "
                                                  (string-to-list "12345"))))
         (effort-value (cdr (assoc input choices))))
    (org-set-property "Effort" effort-value)))

;; Bind the function to a key, e.g., C-c e
(define-key org-mode-map (kbd "C-c e") 'my-set-org-effort)

(setq org-global-properties
      '(("Effort_ALL" . "0:10 0:20 0:30 0:40 1:00 1:30 2:00 3:00 5:00")
        ("STYLE_ALL" . "habit")))

(setq org-time-clocksum-use-effort-durations t)
#+END_SRC

#+RESULTS:
: t

** ledger-mode
   :PROPERTIES:
   :ID: 285fcee6-1b50-4fd2-8c88-0b755b6420cf
   :END:

*** Install and configure ledger-mode for accounting
   :PROPERTIES:
   :ID: 557fe2f2-cc5d-44b2-a189-d04a8743a2a9
   :END:

- Install ledger package using PPA
- Enable ledger-mode and flycheck-ledger

#+BEGIN_SRC
(use-package ledger-mode
  :ensure t
  :init
  (progn
  (ac-config-default)
  (global-auto-complete-mode t)
))

(use-package flycheck-ledger :after ledger-mode)

(autoload 'ledger-mode "ledger-mode" "Ledger" t)
(add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))
(add-to-list 'auto-mode-alist '("\\.dat$" . ledger-mode))
(provide 'init-ledger)
#+END_SRC

** Org-timeblock
:PROPERTIES:
:ID:       3d2289b4-9dea-4b6e-b23e-243a214657a5
:END:

#+BEGIN_SRC
(use-package org-timeblock
  :ensure t
  :bind ("C-c s" . org-timeblock)
  :config
  (let ((org-dir (getenv "ORG_WORKSPACE_PATH")))
    (setq org-timeblock-files (directory-files-recursively org-dir "\\.org$"))
    (setq org-timeblock-inbox-file (expand-file-name "inbox.org" org-dir))))

(setq org-tag-faces
      '(("english" . (:foreground "#FFB6C1" :weight bold)) ; Soft pink
        ("newtend" . (:foreground "#90EE90" :weight bold)) ; Light green
        ("proxyua" . (:foreground "#00FA9A" :weight bold)))) ; Green with aqua (Medium Spring Green)
#+END_SRC

** Calendar (calfw)
:PROPERTIES:
:CREATED:  [2024-03-10 нд 14:41]
:ID:       5b259933-82b4-48a4-b5fb-43a719e0303c
:END:

#+BEGIN_SRC emacs-lisp
;; Docs -- https://github.com/kiwanami/emacs-calfw?tab=readme-ov-file#cfwmodel
(use-package calfw
  :ensure t
  :config
  (require 'calfw-org))

(use-package calfw-org
  :ensure t
  :config
  (setq cfw:org-overwrite-default-keybinding t)
  (setq cfw:org-agenda-schedule-args '(:scheduled :deadline :timestamp))
)

;; First day of the week
(setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday

;; set hight of day by default
;(cfw:create-calendar-component-region :height 10)

;; styles
(custom-set-faces
 '(cfw:face-title ((t (:foreground "#f0dfaf" :weight bold :height 2.0 :inherit variable-pitch))))
 '(cfw:face-header ((t (:foreground "#d0bf8f" :weight bold))))
 '(cfw:face-sunday ((t :foreground "#cc9393" :background "grey10" :weight bold)))
 '(cfw:face-saturday ((t :foreground "#8cd0d3" :background "grey10" :weight bold)))
 '(cfw:face-holiday ((t :background "grey10" :foreground "#8c5353" :weight bold)))
 '(cfw:face-grid ((t :foreground "DarkGrey")))
 '(cfw:face-default-content ((t :foreground "#bfebbf")))
 '(cfw:face-periods ((t :foreground "cyan")))
 '(cfw:face-day-title ((t :background "grey10")))
 '(cfw:face-default-day ((t :weight bold :inherit cfw:face-day-title)))
 '(cfw:face-annotation ((t :foreground "RosyBrown" :inherit cfw:face-day-title)))
 '(cfw:face-disable ((t :foreground "DarkGray" :inherit cfw:face-day-title)))
 '(cfw:face-today-title ((t :background "#7f9f7f" :weight bold)))
 '(cfw:face-today ((t :background: "grey10" :weight bold)))
 '(cfw:face-select ((t :background "#2f2f2f")))
 '(cfw:face-toolbar ((t :foreground "Steelblue4" :background "Steelblue4")))
 '(cfw:face-toolbar-button-off ((t :foreground "Gray10" :weight bold)))
 '(cfw:face-toolbar-button-on ((t :foreground "Gray50" :weight bold))))

(defun my-open-calendar ()
  "Open the calendar view with org-agenda."
  (cfw:open-org-calendar))

;; open calendar
(defun toggle-calendar ()
  "Toggle the calendar window."
  (if (get-buffer "*cfw-calendar*")
      (kill-buffer "*cfw-calendar*")
    (my-open-calendar)))

(global-set-key (kbd "C-c t") 'toggle-calendar)  ; Add another keybinding to toggle
#+END_SRC
